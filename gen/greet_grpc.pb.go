// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: gen/greet.proto

package greetv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GreetService_UnaryGreet_FullMethodName               = "/greet.v1.GreetService/UnaryGreet"
	GreetService_ClientStreamGreet_FullMethodName        = "/greet.v1.GreetService/ClientStreamGreet"
	GreetService_ServerStreamGreet_FullMethodName        = "/greet.v1.GreetService/ServerStreamGreet"
	GreetService_BidirectionalStreamGreet_FullMethodName = "/greet.v1.GreetService/BidirectionalStreamGreet"
)

// GreetServiceClient is the client API for GreetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreetServiceClient interface {
	UnaryGreet(ctx context.Context, in *UnaryGreetRequest, opts ...grpc.CallOption) (*UnaryGreetReply, error)
	ClientStreamGreet(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[ClientStreamGreetRequest, ClientStreamGreetReply], error)
	ServerStreamGreet(ctx context.Context, in *ServerStreamGreetRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ServerStreamGreetReply], error)
	BidirectionalStreamGreet(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[BidirectionalStreamGreetRequest, BidirectionalStreamGreetReply], error)
}

type greetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGreetServiceClient(cc grpc.ClientConnInterface) GreetServiceClient {
	return &greetServiceClient{cc}
}

func (c *greetServiceClient) UnaryGreet(ctx context.Context, in *UnaryGreetRequest, opts ...grpc.CallOption) (*UnaryGreetReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnaryGreetReply)
	err := c.cc.Invoke(ctx, GreetService_UnaryGreet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greetServiceClient) ClientStreamGreet(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[ClientStreamGreetRequest, ClientStreamGreetReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GreetService_ServiceDesc.Streams[0], GreetService_ClientStreamGreet_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ClientStreamGreetRequest, ClientStreamGreetReply]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GreetService_ClientStreamGreetClient = grpc.ClientStreamingClient[ClientStreamGreetRequest, ClientStreamGreetReply]

func (c *greetServiceClient) ServerStreamGreet(ctx context.Context, in *ServerStreamGreetRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ServerStreamGreetReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GreetService_ServiceDesc.Streams[1], GreetService_ServerStreamGreet_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ServerStreamGreetRequest, ServerStreamGreetReply]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GreetService_ServerStreamGreetClient = grpc.ServerStreamingClient[ServerStreamGreetReply]

func (c *greetServiceClient) BidirectionalStreamGreet(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[BidirectionalStreamGreetRequest, BidirectionalStreamGreetReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GreetService_ServiceDesc.Streams[2], GreetService_BidirectionalStreamGreet_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[BidirectionalStreamGreetRequest, BidirectionalStreamGreetReply]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GreetService_BidirectionalStreamGreetClient = grpc.BidiStreamingClient[BidirectionalStreamGreetRequest, BidirectionalStreamGreetReply]

// GreetServiceServer is the server API for GreetService service.
// All implementations must embed UnimplementedGreetServiceServer
// for forward compatibility.
type GreetServiceServer interface {
	UnaryGreet(context.Context, *UnaryGreetRequest) (*UnaryGreetReply, error)
	ClientStreamGreet(grpc.ClientStreamingServer[ClientStreamGreetRequest, ClientStreamGreetReply]) error
	ServerStreamGreet(*ServerStreamGreetRequest, grpc.ServerStreamingServer[ServerStreamGreetReply]) error
	BidirectionalStreamGreet(grpc.BidiStreamingServer[BidirectionalStreamGreetRequest, BidirectionalStreamGreetReply]) error
	mustEmbedUnimplementedGreetServiceServer()
}

// UnimplementedGreetServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGreetServiceServer struct{}

func (UnimplementedGreetServiceServer) UnaryGreet(context.Context, *UnaryGreetRequest) (*UnaryGreetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryGreet not implemented")
}
func (UnimplementedGreetServiceServer) ClientStreamGreet(grpc.ClientStreamingServer[ClientStreamGreetRequest, ClientStreamGreetReply]) error {
	return status.Errorf(codes.Unimplemented, "method ClientStreamGreet not implemented")
}
func (UnimplementedGreetServiceServer) ServerStreamGreet(*ServerStreamGreetRequest, grpc.ServerStreamingServer[ServerStreamGreetReply]) error {
	return status.Errorf(codes.Unimplemented, "method ServerStreamGreet not implemented")
}
func (UnimplementedGreetServiceServer) BidirectionalStreamGreet(grpc.BidiStreamingServer[BidirectionalStreamGreetRequest, BidirectionalStreamGreetReply]) error {
	return status.Errorf(codes.Unimplemented, "method BidirectionalStreamGreet not implemented")
}
func (UnimplementedGreetServiceServer) mustEmbedUnimplementedGreetServiceServer() {}
func (UnimplementedGreetServiceServer) testEmbeddedByValue()                      {}

// UnsafeGreetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreetServiceServer will
// result in compilation errors.
type UnsafeGreetServiceServer interface {
	mustEmbedUnimplementedGreetServiceServer()
}

func RegisterGreetServiceServer(s grpc.ServiceRegistrar, srv GreetServiceServer) {
	// If the following call pancis, it indicates UnimplementedGreetServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GreetService_ServiceDesc, srv)
}

func _GreetService_UnaryGreet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnaryGreetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreetServiceServer).UnaryGreet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GreetService_UnaryGreet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreetServiceServer).UnaryGreet(ctx, req.(*UnaryGreetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GreetService_ClientStreamGreet_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreetServiceServer).ClientStreamGreet(&grpc.GenericServerStream[ClientStreamGreetRequest, ClientStreamGreetReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GreetService_ClientStreamGreetServer = grpc.ClientStreamingServer[ClientStreamGreetRequest, ClientStreamGreetReply]

func _GreetService_ServerStreamGreet_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ServerStreamGreetRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreetServiceServer).ServerStreamGreet(m, &grpc.GenericServerStream[ServerStreamGreetRequest, ServerStreamGreetReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GreetService_ServerStreamGreetServer = grpc.ServerStreamingServer[ServerStreamGreetReply]

func _GreetService_BidirectionalStreamGreet_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreetServiceServer).BidirectionalStreamGreet(&grpc.GenericServerStream[BidirectionalStreamGreetRequest, BidirectionalStreamGreetReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GreetService_BidirectionalStreamGreetServer = grpc.BidiStreamingServer[BidirectionalStreamGreetRequest, BidirectionalStreamGreetReply]

// GreetService_ServiceDesc is the grpc.ServiceDesc for GreetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GreetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "greet.v1.GreetService",
	HandlerType: (*GreetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UnaryGreet",
			Handler:    _GreetService_UnaryGreet_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ClientStreamGreet",
			Handler:       _GreetService_ClientStreamGreet_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ServerStreamGreet",
			Handler:       _GreetService_ServerStreamGreet_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BidirectionalStreamGreet",
			Handler:       _GreetService_BidirectionalStreamGreet_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "gen/greet.proto",
}
